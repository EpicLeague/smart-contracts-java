package contracts.nft.v1;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class TotemBoxHubV1 extends Contract {
    public static final String BINARY = "0x60c06040526005608081905264173539b7b760d91b60a0908152620000289160119190620002dd565b503480156200003657600080fd5b5060405162003d2d38038062003d2d83398101604081905262000059916200046d565b87878787868685858581600090805190602001906200007a929190620002dd565b50805162000090906001906020840190620002dd565b5050600b805460ff1916905550620000a8336200013e565b600c80546001600160a01b0319166001600160a01b0392909216919091179055620000d560003362000198565b620001017f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083362000198565b6200010c836200023d565b62000117826200027d565b6200012281620002ad565b5050506014969096555050601355506200057595505050505050565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1662000239576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001f83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b33600090815260008051602062003d0d833981519152602052604090205460ff166200026857600080fd5b805162000239906010906020840190620002dd565b33600090815260008051602062003d0d833981519152602052604090205460ff16620002a857600080fd5b600e55565b33600090815260008051602062003d0d833981519152602052604090205460ff16620002d857600080fd5b600f55565b828054620002eb9062000539565b90600052602060002090601f0160209004810192826200030f57600085556200035a565b82601f106200032a57805160ff19168380011785556200035a565b828001600101855582156200035a579182015b828111156200035a5782518255916020019190600101906200033d565b50620003689291506200036c565b5090565b5b808211156200036857600081556001016200036d565b80516001600160a01b03811681146200039b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620003c857600080fd5b81516001600160401b0380821115620003e557620003e5620003a0565b604051601f8301601f19908116603f01168101908282118183101715620004105762000410620003a0565b816040528381526020925086838588010111156200042d57600080fd5b600091505b8382101562000451578582018301518183018401529082019062000432565b83821115620004635760008385830101525b9695505050505050565b600080600080600080600080610100898b0312156200048b57600080fd5b620004968962000383565b60208a01519098506001600160401b0380821115620004b457600080fd5b620004c28c838d01620003b6565b985060408b0151915080821115620004d957600080fd5b620004e78c838d01620003b6565b975060608b0151915080821115620004fe57600080fd5b506200050d8b828c01620003b6565b9550506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600181811c908216806200054e57607f821691505b6020821081036200056f57634e487b7160e01b600052602260045260246000fd5b50919050565b61378880620005856000396000f3fe6080604052600436106103505760003560e01c80636f8b44b0116101c6578063a2309ff8116100f7578063d5abeb0111610095578063e985e9c51161006f578063e985e9c514610971578063ec87621c146109ba578063f2fde38b146109dc578063f3ae2415146109fc57600080fd5b8063d5abeb011461091b578063d64912bf14610931578063da3ef23f1461095157600080fd5b8063c4b95b5c116100d1578063c4b95b5c146108a6578063c6682862146108c6578063c87b56dd146108db578063d547741f146108fb57600080fd5b8063a2309ff81461085a578063addc6a7714610870578063b88d4fde1461088657600080fd5b806391d14854116101645780639880343f1161013e5780639880343f146107f2578063a0712d6814610812578063a217fddf14610825578063a22cb4651461083a57600080fd5b806391d148541461079d57806395d89b41146107bd5780639641ebed146107d257600080fd5b80637a9478fb116101a05780637a9478fb1461070d5780638417b47f146107455780638456cb59146107655780638da5cb5b1461077a57600080fd5b80636f8b44b0146106b857806370a08231146106d8578063715018a6146106f857600080fd5b806335db70b5116102a057806342966c681161023e57806355f804b31161021857806355f804b31461064b5780635c975abb1461066b5780636352211e146106835780636c0360eb146106a357600080fd5b806342966c68146105de578063438b6300146105fe5780634f6ccce71461062b57600080fd5b80633bdebbe11161027a5780633bdebbe1146105815780633ccfd60b146105a15780633f4ba83a146105a957806342842e0e146105be57600080fd5b806335db70b51461052b57806336568abe14610541578063377e32e61461056157600080fd5b806318160ddd1161030d578063248a9ca3116102e7578063248a9ca31461049b5780632bb890f0146104cb5780632f2ff15d146104eb5780632f745c591461050b57600080fd5b806318160ddd14610446578063239c70ae1461046557806323b872dd1461047b57600080fd5b806301ffc9a71461035557806306fdde031461038a578063081812fc146103ac578063088a4ed0146103e4578063095ea7b3146104065780631330d0c814610426575b600080fd5b34801561036157600080fd5b50610375610370366004612e99565b610a1c565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b5061039f610a2d565b6040516103819190612f0e565b3480156103b857600080fd5b506103cc6103c7366004612f21565b610abf565b6040516001600160a01b039091168152602001610381565b3480156103f057600080fd5b506104046103ff366004612f21565b610b59565b005b34801561041257600080fd5b50610404610421366004612f56565b610b7f565b34801561043257600080fd5b50610404610441366004612f56565b610c94565b34801561045257600080fd5b506008545b604051908152602001610381565b34801561047157600080fd5b50610457600f5481565b34801561048757600080fd5b50610404610496366004612f80565b610df9565b3480156104a757600080fd5b506104576104b6366004612f21565b6000908152600a602052604090206001015490565b3480156104d757600080fd5b506104576104e6366004612fbc565b610e2b565b3480156104f757600080fd5b50610404610506366004612fd7565b610e84565b34801561051757600080fd5b50610457610526366004612f56565b610ea9565b34801561053757600080fd5b5061045760145481565b34801561054d57600080fd5b5061040461055c366004612fd7565b610f3f565b34801561056d57600080fd5b5061040461057c366004612fbc565b610fbd565b34801561058d57600080fd5b5061040461059c366004612fbc565b610ff9565b6104046111f3565b3480156105b557600080fd5b506104046112be565b3480156105ca57600080fd5b506104046105d9366004612f80565b6112e9565b3480156105ea57600080fd5b506104046105f9366004612f21565b611304565b34801561060a57600080fd5b5061061e610619366004612fbc565b61137b565b6040516103819190613003565b34801561063757600080fd5b50610457610646366004612f21565b61141d565b34801561065757600080fd5b506104046106663660046130d3565b6114b0565b34801561067757600080fd5b50600b5460ff16610375565b34801561068f57600080fd5b506103cc61069e366004612f21565b6114e4565b3480156106af57600080fd5b5061039f61155b565b3480156106c457600080fd5b506104046106d3366004612f21565b6115e9565b3480156106e457600080fd5b506104576106f3366004612fbc565b61160f565b34801561070457600080fd5b50610404611696565b34801561071957600080fd5b50610375610728366004612fbc565b6001600160a01b0316600090815260126020526040902054151590565b34801561075157600080fd5b50610404610760366004612f21565b6116d0565b34801561077157600080fd5b506104046116f6565b34801561078657600080fd5b50600b5461010090046001600160a01b03166103cc565b3480156107a957600080fd5b506103756107b8366004612fd7565b61171f565b3480156107c957600080fd5b5061039f61174a565b3480156107de57600080fd5b506104046107ed366004612f21565b611759565b3480156107fe57600080fd5b5061040461080d366004612f56565b61177f565b610404610820366004612f21565b6117aa565b34801561083157600080fd5b50610457600081565b34801561084657600080fd5b5061040461085536600461312a565b611952565b34801561086657600080fd5b50610457600d5481565b34801561087c57600080fd5b5061045760135481565b34801561089257600080fd5b506104046108a1366004613161565b61195d565b3480156108b257600080fd5b506104046108c1366004612fbc565b611995565b3480156108d257600080fd5b5061039f6119ce565b3480156108e757600080fd5b5061039f6108f6366004612f21565b6119db565b34801561090757600080fd5b50610404610916366004612fd7565b611ab9565b34801561092757600080fd5b50610457600e5481565b34801561093d57600080fd5b5061040461094c366004612fbc565b611ade565b34801561095d57600080fd5b5061040461096c3660046130d3565b611b08565b34801561097d57600080fd5b5061037561098c3660046131dd565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156109c657600080fd5b5061045760008051602061373383398151915281565b3480156109e857600080fd5b506104046109f7366004612fbc565b611b3c565b348015610a0857600080fd5b50610375610a17366004612fbc565b611bda565b6000610a2782611bf4565b92915050565b606060008054610a3c90613207565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6890613207565b8015610ab55780601f10610a8a57610100808354040283529160200191610ab5565b820191906000526020600020905b815481529060010190602001808311610a9857829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b3d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b610b716000805160206137338339815191523361171f565b610b7a57600080fd5b600f55565b6000610b8a826114e4565b9050806001600160a01b0316836001600160a01b031603610bf75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b34565b336001600160a01b0382161480610c135750610c13813361098c565b610c855760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610b34565b610c8f8383611c19565b505050565b600b5460ff1615610cb75760405162461bcd60e51b8152600401610b349061323b565b8060135481610cc66106f33390565b610cd0919061327b565b1115610cdd601354611c87565b604051602001610ced9190613293565b60405160208183030381529060405290610d1a5760405162461bcd60e51b8152600401610b349190612f0e565b508160008111610d3c5760405162461bcd60e51b8152600401610b34906132f1565b82600f54811115610d5f5760405162461bcd60e51b8152600401610b3490613339565b600e5484600d54610d70919061327b565b1115610db35760405162461bcd60e51b81526020600482015260126024820152716d617820737570706c79206578636565647360701b6044820152606401610b34565b610dbd8585611d90565b60015b848111610df1576000610dd1611ecc565b9050610dde335b82611f40565b5080610de98161338b565b915050610dc0565b505050505050565b610e04335b82611f5a565b610e205760405162461bcd60e51b8152600401610b34906133a4565b610c8f838383612050565b6001600160a01b0381166000908152601260205260408120548290610e625760405162461bcd60e51b8152600401610b34906133f5565b6001600160a01b03831660009081526012602052604090205491505b50919050565b6000828152600a6020526040902060010154610e9f816121f7565b610c8f8383612201565b6000610eb48361160f565b8210610f165760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610b34565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610faf5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610b34565b610fb98282612287565b5050565b610fd56000805160206137338339815191523361171f565b610fde57600080fd5b610ff660008051602061373383398151915282612287565b50565b600b546001600160a01b036101009091041633146110295760405162461bcd60e51b8152600401610b349061342c565b8061104b816001600160a01b0316600090815260126020526040902054151590565b6110675760405162461bcd60e51b8152600401610b34906133f5565b6040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156110b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d49190613461565b9050816001600160a01b031663a9059cbb6110fd600b546001600160a01b036101009091041690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e919061347a565b6111ba5760405162461bcd60e51b815260206004820152601960248201527f6661696c656420746f2077697468647261772045524332302e000000000000006044820152606401610b34565b6040518181527f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b569060200160405180910390a150505050565b600b546001600160a01b036101009091041633146112235760405162461bcd60e51b8152600401610b349061342c565b600b5460405160009161010090046001600160a01b03169047908381818185875af1925050503d8060008114611275576040519150601f19603f3d011682016040523d82523d6000602084013e61127a565b606091505b5050905080610ff65760405162461bcd60e51b815260206004820152601060248201526f1dda5d1a191c985ddb0819985a5b195960821b6044820152606401610b34565b6112d66000805160206137338339815191523361171f565b6112df57600080fd5b6112e76122ee565b565b610c8f8383836040518060200160405280600081525061195d565b61130d33610dfe565b6113725760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610b34565b610ff681612381565b606060006113888361160f565b905060008167ffffffffffffffff8111156113a5576113a5613047565b6040519080825280602002602001820160405280156113ce578160200160208202803683370190505b50905060005b82811015611415576113e68582610ea9565b8282815181106113f8576113f8613497565b60209081029190910101528061140d8161338b565b9150506113d4565b509392505050565b600061142860085490565b821061148b5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610b34565b6008828154811061149e5761149e613497565b90600052602060002001549050919050565b6114c86000805160206137338339815191523361171f565b6114d157600080fd5b8051610fb9906010906020840190612dea565b6000818152600260205260408120546001600160a01b031680610a275760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610b34565b6010805461156890613207565b80601f016020809104026020016040519081016040528092919081815260200182805461159490613207565b80156115e15780601f106115b6576101008083540402835291602001916115e1565b820191906000526020600020905b8154815290600101906020018083116115c457829003601f168201915b505050505081565b6116016000805160206137338339815191523361171f565b61160a57600080fd5b600e55565b60006001600160a01b03821661167a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610b34565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b036101009091041633146116c65760405162461bcd60e51b8152600401610b349061342c565b6112e76000612428565b6116e86000805160206137338339815191523361171f565b6116f157600080fd5b601455565b61170e6000805160206137338339815191523361171f565b61171757600080fd5b6112e7612482565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060018054610a3c90613207565b6117716000805160206137338339815191523361171f565b61177a57600080fd5b601355565b6117976000805160206137338339815191523361171f565b6117a057600080fd5b610fb982826124da565b600b5460ff16156117cd5760405162461bcd60e51b8152600401610b349061323b565b80601354816117dc6106f33390565b6117e6919061327b565b11156117f3601354611c87565b6040516020016118039190613293565b604051602081830303815290604052906118305760405162461bcd60e51b8152600401610b349190612f0e565b5081600081116118525760405162461bcd60e51b8152600401610b34906132f1565b82600f548111156118755760405162461bcd60e51b8152600401610b3490613339565b600e5484600d54611886919061327b565b11156118c95760405162461bcd60e51b81526020600482015260126024820152716d617820737570706c79206578636565647360701b6044820152606401610b34565b836014546118d791906134ad565b3410156119195760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820707269636560801b6044820152606401610b34565b60015b84811161194b57600061192d611ecc565b905061193833610dd8565b50806119438161338b565b91505061191c565b5050505050565b610fb9338383612509565b6119673383611f5a565b6119835760405162461bcd60e51b8152600401610b34906133a4565b61198f848484846125d7565b50505050565b6119ad6000805160206137338339815191523361171f565b6119b657600080fd5b610ff660008051602061373383398151915282612201565b6011805461156890613207565b6000818152600260205260409020546060906001600160a01b0316611a5a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b34565b6000611a6461260a565b90506000815111611a845760405180602001604052806000815250611ab2565b80611a8e84611c87565b6011604051602001611aa2939291906134cc565b6040516020818303038152906040525b9392505050565b6000828152600a6020526040902060010154611ad4816121f7565b610c8f8383612287565b611af66000805160206137338339815191523361171f565b611aff57600080fd5b610ff681612619565b611b206000805160206137338339815191523361171f565b611b2957600080fd5b8051610fb9906011906020840190612dea565b600b546001600160a01b03610100909104163314611b6c5760405162461bcd60e51b8152600401610b349061342c565b6001600160a01b038116611bd15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b34565b610ff681612428565b6000610a276000805160206137338339815191528361171f565b60006001600160e01b03198216637965db0b60e01b1480610a275750610a2782612646565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c4e826114e4565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606081600003611cae5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611cd85780611cc28161338b565b9150611cd19050600a836135a5565b9150611cb2565b60008167ffffffffffffffff811115611cf357611cf3613047565b6040519080825280601f01601f191660200182016040528015611d1d576020820181803683370190505b5090505b8415611d8857611d326001836135b9565b9150611d3f600a866135d0565b611d4a90603061327b565b60f81b818381518110611d5f57611d5f613497565b60200101906001600160f81b031916908160001a905350611d81600a866135a5565b9450611d21565b949350505050565b81611db2816001600160a01b0316600090815260126020526040902054151590565b611dce5760405162461bcd60e51b8152600401610b34906133f5565b6000611dd984610e2b565b9050836000611de885846134ad565b90506001600160a01b0382166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018490526064016020604051808303816000875af1158015611e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e71919061347a565b611e7a57600080fd5b604080516001600160a01b0388168152602081018590529081018290527fee821f13009961f2de7180495d66e5b3e155b001f06db1aff96a720045ea404b9060600160405180910390a1505050505050565b600c5460408051631c28c8e960e31b815290516000926001600160a01b03169163e1464748916004808301926020929190829003018187875af1158015611f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3b9190613461565b905090565b610fb982826040518060200160405280600081525061266b565b6000818152600260205260408120546001600160a01b0316611fd35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b34565b6000611fde836114e4565b9050806001600160a01b0316846001600160a01b0316148061202557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611d885750836001600160a01b031661203e84610abf565b6001600160a01b031614949350505050565b826001600160a01b0316612063826114e4565b6001600160a01b0316146120c75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b34565b6001600160a01b0382166121295760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b34565b61213483838361269e565b61213f600082611c19565b6001600160a01b03831660009081526003602052604081208054600192906121689084906135b9565b90915550506001600160a01b038216600090815260036020526040812080546001929061219690849061327b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610ff68133612703565b61220b828261171f565b610fb9576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556122433390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612291828261171f565b15610fb9576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600b5460ff166123375760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b34565b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061238c826114e4565b905061239a8160008461269e565b6123a5600083611c19565b6001600160a01b03811660009081526003602052604081208054600192906123ce9084906135b9565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600b5460ff16156124a55760405162461bcd60e51b8152600401610b349061323b565b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123643390565b6001600160a01b0382166124ed57600080fd5b6001600160a01b03909116600090815260126020526040902055565b816001600160a01b0316836001600160a01b03160361256a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b34565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6125e2848484612050565b6125ee84848484612767565b61198f5760405162461bcd60e51b8152600401610b34906135e4565b606060108054610a3c90613207565b6001600160a01b03811661262c57600080fd5b6001600160a01b0316600090815260126020526040812055565b60006001600160e01b0319821663780e9d6360e01b1480610a275750610a2782612868565b61267583836128b8565b6126826000848484612767565b610c8f5760405162461bcd60e51b8152600401610b34906135e4565b6001600160a01b038216156126d057600b5460ff16156126d05760405162461bcd60e51b8152600401610b349061323b565b6126db838383612a06565b6001600160a01b038316610c8f57600d80549060006126f98361338b565b9190505550505050565b61270d828261171f565b610fb957612725816001600160a01b03166014612abe565b612730836020612abe565b604051602001612741929190613636565b60408051601f198184030181529082905262461bcd60e51b8252610b3491600401612f0e565b60006001600160a01b0384163b1561285d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906127ab9033908990889088906004016136ab565b6020604051808303816000875af19250505080156127e6575060408051601f3d908101601f191682019092526127e3918101906136e8565b60015b612843573d808015612814576040519150601f19603f3d011682016040523d82523d6000602084013e612819565b606091505b50805160000361283b5760405162461bcd60e51b8152600401610b34906135e4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d88565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b148061289957506001600160e01b03198216635b5e139f60e01b145b80610a2757506301ffc9a760e01b6001600160e01b0319831614610a27565b6001600160a01b03821661290e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b34565b6000818152600260205260409020546001600160a01b0316156129735760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b34565b61297f6000838361269e565b6001600160a01b03821660009081526003602052604081208054600192906129a890849061327b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038316612a6157612a5c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612a84565b816001600160a01b0316836001600160a01b031614612a8457612a848382612c5a565b6001600160a01b038216612a9b57610c8f81612cf7565b826001600160a01b0316826001600160a01b031614610c8f57610c8f8282612da6565b60606000612acd8360026134ad565b612ad890600261327b565b67ffffffffffffffff811115612af057612af0613047565b6040519080825280601f01601f191660200182016040528015612b1a576020820181803683370190505b509050600360fc1b81600081518110612b3557612b35613497565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b6457612b64613497565b60200101906001600160f81b031916908160001a9053506000612b888460026134ad565b612b9390600161327b565b90505b6001811115612c0b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612bc757612bc7613497565b1a60f81b828281518110612bdd57612bdd613497565b60200101906001600160f81b031916908160001a90535060049490941c93612c0481613705565b9050612b96565b508315611ab25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b34565b60006001612c678461160f565b612c7191906135b9565b600083815260076020526040902054909150808214612cc4576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612d09906001906135b9565b60008381526009602052604081205460088054939450909284908110612d3157612d31613497565b906000526020600020015490508060088381548110612d5257612d52613497565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612d8a57612d8a61371c565b6001900381819060005260206000200160009055905550505050565b6000612db18361160f565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612df690613207565b90600052602060002090601f016020900481019282612e185760008555612e5e565b82601f10612e3157805160ff1916838001178555612e5e565b82800160010185558215612e5e579182015b82811115612e5e578251825591602001919060010190612e43565b50612e6a929150612e6e565b5090565b5b80821115612e6a5760008155600101612e6f565b6001600160e01b031981168114610ff657600080fd5b600060208284031215612eab57600080fd5b8135611ab281612e83565b60005b83811015612ed1578181015183820152602001612eb9565b8381111561198f5750506000910152565b60008151808452612efa816020860160208601612eb6565b601f01601f19169290920160200192915050565b602081526000611ab26020830184612ee2565b600060208284031215612f3357600080fd5b5035919050565b80356001600160a01b0381168114612f5157600080fd5b919050565b60008060408385031215612f6957600080fd5b612f7283612f3a565b946020939093013593505050565b600080600060608486031215612f9557600080fd5b612f9e84612f3a565b9250612fac60208501612f3a565b9150604084013590509250925092565b600060208284031215612fce57600080fd5b611ab282612f3a565b60008060408385031215612fea57600080fd5b82359150612ffa60208401612f3a565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561303b5783518352928401929184019160010161301f565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561307857613078613047565b604051601f8501601f19908116603f011681019082821181831017156130a0576130a0613047565b816040528093508581528686860111156130b957600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156130e557600080fd5b813567ffffffffffffffff8111156130fc57600080fd5b8201601f8101841361310d57600080fd5b611d888482356020840161305d565b8015158114610ff657600080fd5b6000806040838503121561313d57600080fd5b61314683612f3a565b915060208301356131568161311c565b809150509250929050565b6000806000806080858703121561317757600080fd5b61318085612f3a565b935061318e60208601612f3a565b925060408501359150606085013567ffffffffffffffff8111156131b157600080fd5b8501601f810187136131c257600080fd5b6131d18782356020840161305d565b91505092959194509250565b600080604083850312156131f057600080fd5b6131f983612f3a565b9150612ffa60208401612f3a565b600181811c9082168061321b57607f821691505b602082108103610e7e57634e487b7160e01b600052602260045260246000fd5b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561328e5761328e613265565b500190565b6e02a37ba32b6a137bc1d1037b7363c9608d1b8152600082516132bd81600f850160208701612eb6565b7f2061726520616c6c6f77656420706572206163636f756e740000000000000000600f939091019283015250602701919050565b60208082526028908201527f4d696e7420616d6f756e742073686f756c64206265206772656174657220746860408201526730b7103d32b9379760c11b606082015260800190565b60208082526032908201527f4d696e7420616d6f756e742073686f756c6420626520736d616c6c6572207468604082015271185b881b585e081b5a5b9d08185b5bdd5b9d60721b606082015260800190565b60006001820161339d5761339d613265565b5060010190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601d908201527f6f6e6c79207265676973746572656420657263323020616c6c6f776564000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561347357600080fd5b5051919050565b60006020828403121561348c57600080fd5b8151611ab28161311c565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156134c7576134c7613265565b500290565b6000845160206134df8285838a01612eb6565b8551918401916134f28184848a01612eb6565b8554920191600090600181811c908083168061350f57607f831692505b858310810361352c57634e487b7160e01b85526022600452602485fd5b80801561354057600181146135515761357e565b60ff1985168852838801955061357e565b60008b81526020902060005b858110156135765781548a82015290840190880161355d565b505083880195505b50939b9a5050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826135b4576135b461358f565b500490565b6000828210156135cb576135cb613265565b500390565b6000826135df576135df61358f565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161366e816017850160208801612eb6565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161369f816028840160208801612eb6565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906136de90830184612ee2565b9695505050505050565b6000602082840312156136fa57600080fd5b8151611ab281612e83565b60008161371457613714613265565b506000190190565b634e487b7160e01b600052603160045260246000fdfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a2646970667358221220cc985f91b288d94c310b3db5ab929b72633c4afa7b03fa4fbecf47bd95bf940864736f6c634300080e0033d455b02263d38bf66a1ba205b80d4fdc1196fd75b5131f681af52f64427d695b";

    private static String librariesLinkedBinary;

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MANAGER_ROLE = "MANAGER_ROLE";

    public static final String FUNC_AMOUNTALLOWANCEPERACCOUNT = "amountAllowancePerAccount";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASEEXTENSION = "baseExtension";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTMANAGER = "grantManager";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISMANAGER = "isManager";

    public static final String FUNC_ISREGISTEREDMINTABLEERC20TOKEN = "isRegisteredMintableERC20Token";

    public static final String FUNC_MAXMINTAMOUNT = "maxMintAmount";

    public static final String FUNC_MAXSUPPLY = "maxSupply";

    public static final String FUNC_MINTINGPRICE = "mintingPrice";

    public static final String FUNC_MINTINGPRICEOFERC20TOKEN = "mintingPriceOfERC20Token";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEMANAGER = "revokeManager";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASEEXTENSION = "setBaseExtension";

    public static final String FUNC_SETBASEURI = "setBaseURI";

    public static final String FUNC_SETMAXMINTAMOUNT = "setMaxMintAmount";

    public static final String FUNC_SETMAXSUPPLY = "setMaxSupply";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALMINTED = "totalMinted";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_WALLETOFOWNER = "walletOfOwner";

    public static final String FUNC_WITHDRAWERC20TOKEN = "withdrawERC20Token";

    public static final String FUNC_SETAMOUNTALLOWANCEPERACCOUNT = "setAmountAllowancePerAccount";

    public static final String FUNC_ADDMINTABLEERC20TOKEN = "addMintableERC20Token";

    public static final String FUNC_REMOVEMINTABLEERC20TOKEN = "removeMintableERC20Token";

    public static final String FUNC_SETMINTINGPRICE = "setMintingPrice";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTWITHERC20 = "mintWithERC20";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SPENTERC20_EVENT = new Event("SpentERC20", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event WITHDRAWN_EVENT = new Event("Withdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("56", "0x65b448f6d1a47be83e608109506ae5185735e832");
    }

    @Deprecated
    protected TotemBoxHubV1(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TotemBoxHubV1(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TotemBoxHubV1(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TotemBoxHubV1(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleAdminChangedEventResponse getRoleAdminChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
        RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleAdminChangedEventFromLog(log));
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public static List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleGrantedEventResponse getRoleGrantedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, log);
        RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleGrantedEventFromLog(log));
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public static List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleRevokedEventResponse getRoleRevokedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, log);
        RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleRevokedEventFromLog(log));
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public static List<SpentERC20EventResponse> getSpentERC20Events(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SPENTERC20_EVENT, transactionReceipt);
        ArrayList<SpentERC20EventResponse> responses = new ArrayList<SpentERC20EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SpentERC20EventResponse typedResponse = new SpentERC20EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.erc20 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.unitPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.totalCost = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SpentERC20EventResponse getSpentERC20EventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SPENTERC20_EVENT, log);
        SpentERC20EventResponse typedResponse = new SpentERC20EventResponse();
        typedResponse.log = log;
        typedResponse.erc20 = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.unitPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.totalCost = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<SpentERC20EventResponse> spentERC20EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSpentERC20EventFromLog(log));
    }

    public Flowable<SpentERC20EventResponse> spentERC20EventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SPENTERC20_EVENT));
        return spentERC20EventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public static List<WithdrawnEventResponse> getWithdrawnEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWN_EVENT, transactionReceipt);
        ArrayList<WithdrawnEventResponse> responses = new ArrayList<WithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawnEventResponse typedResponse = new WithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawnEventResponse getWithdrawnEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWN_EVENT, log);
        WithdrawnEventResponse typedResponse = new WithdrawnEventResponse();
        typedResponse.log = log;
        typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawnEventResponse> withdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawnEventFromLog(log));
    }

    public Flowable<WithdrawnEventResponse> withdrawnEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWN_EVENT));
        return withdrawnEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> call_DEFAULT_ADMIN_ROLE() {
        final Function function = new Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_DEFAULT_ADMIN_ROLE() {
        final Function function = new Function(
                FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> call_MANAGER_ROLE() {
        final Function function = new Function(FUNC_MANAGER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_MANAGER_ROLE() {
        final Function function = new Function(
                FUNC_MANAGER_ROLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_amountAllowancePerAccount() {
        final Function function = new Function(FUNC_AMOUNTALLOWANCEPERACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_amountAllowancePerAccount() {
        final Function function = new Function(
                FUNC_AMOUNTALLOWANCEPERACCOUNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_balanceOf(String owner) {
        final Function function = new Function(
                FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_baseExtension() {
        final Function function = new Function(FUNC_BASEEXTENSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_baseExtension() {
        final Function function = new Function(
                FUNC_BASEEXTENSION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_baseURI() {
        final Function function = new Function(FUNC_BASEURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_baseURI() {
        final Function function = new Function(
                FUNC_BASEURI, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_burn(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_getApproved(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> call_getRoleAdmin(byte[] role) {
        final Function function = new Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_getRoleAdmin(byte[] role) {
        final Function function = new Function(
                FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_grantManager(String account) {
        final Function function = new Function(
                FUNC_GRANTMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_grantRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_hasRole(byte[] role, String account) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_hasRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_isApprovedForAll(String owner,
            String operator) {
        final Function function = new Function(
                FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_isManager(String account) {
        final Function function = new Function(FUNC_ISMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_isManager(String account) {
        final Function function = new Function(
                FUNC_ISMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_isRegisteredMintableERC20Token(String erc20) {
        final Function function = new Function(FUNC_ISREGISTEREDMINTABLEERC20TOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_isRegisteredMintableERC20Token(
            String erc20) {
        final Function function = new Function(
                FUNC_ISREGISTEREDMINTABLEERC20TOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_maxMintAmount() {
        final Function function = new Function(FUNC_MAXMINTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_maxMintAmount() {
        final Function function = new Function(
                FUNC_MAXMINTAMOUNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_maxSupply() {
        final Function function = new Function(FUNC_MAXSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_maxSupply() {
        final Function function = new Function(
                FUNC_MAXSUPPLY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_mintingPrice() {
        final Function function = new Function(FUNC_MINTINGPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_mintingPrice() {
        final Function function = new Function(
                FUNC_MINTINGPRICE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_mintingPriceOfERC20Token(String erc20) {
        final Function function = new Function(FUNC_MINTINGPRICEOFERC20TOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_mintingPriceOfERC20Token(String erc20) {
        final Function function = new Function(
                FUNC_MINTINGPRICEOFERC20TOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_name() {
        final Function function = new Function(
                FUNC_NAME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_owner() {
        final Function function = new Function(
                FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_ownerOf(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_paused() {
        final Function function = new Function(
                FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_renounceRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_revokeManager(String account) {
        final Function function = new Function(
                FUNC_REVOKEMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_revokeRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] _data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setBaseExtension(String _newBaseExtension) {
        final Function function = new Function(
                FUNC_SETBASEEXTENSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_newBaseExtension)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setBaseURI(String _newBaseURI) {
        final Function function = new Function(
                FUNC_SETBASEURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_newBaseURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setMaxMintAmount(
            BigInteger _newmaxMintAmount) {
        final Function function = new Function(
                FUNC_SETMAXMINTAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newmaxMintAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setMaxSupply(BigInteger _newMaxSupply) {
        final Function function = new Function(
                FUNC_SETMAXSUPPLY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newMaxSupply)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_supportsInterface(byte[] interfaceId) {
        final Function function = new Function(
                FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_symbol() {
        final Function function = new Function(
                FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_tokenByIndex(BigInteger index) {
        final Function function = new Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_tokenByIndex(BigInteger index) {
        final Function function = new Function(
                FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_tokenOfOwnerByIndex(String owner, BigInteger index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_tokenOfOwnerByIndex(String owner,
            BigInteger index) {
        final Function function = new Function(
                FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_tokenURI(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_totalMinted() {
        final Function function = new Function(FUNC_TOTALMINTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_totalMinted() {
        final Function function = new Function(
                FUNC_TOTALMINTED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_totalSupply() {
        final Function function = new Function(
                FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> call_walletOfOwner(String _owner) {
        final Function function = new Function(FUNC_WALLETOFOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> send_walletOfOwner(String _owner) {
        final Function function = new Function(
                FUNC_WALLETOFOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_withdrawERC20Token(String erc20) {
        final Function function = new Function(
                FUNC_WITHDRAWERC20TOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setAmountAllowancePerAccount(
            BigInteger allowance) {
        final Function function = new Function(
                FUNC_SETAMOUNTALLOWANCEPERACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(allowance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_addMintableERC20Token(String erc20,
            BigInteger price) {
        final Function function = new Function(
                FUNC_ADDMINTABLEERC20TOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_removeMintableERC20Token(String erc20) {
        final Function function = new Function(
                FUNC_REMOVEMINTABLEERC20TOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setMintingPrice(BigInteger price) {
        final Function function = new Function(
                FUNC_SETMINTINGPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_mint(BigInteger mintAmount,
            BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mintAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> send_mintWithERC20(String erc20,
            BigInteger mintAmount) {
        final Function function = new Function(
                FUNC_MINTWITHERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20), 
                new org.web3j.abi.datatypes.generated.Uint256(mintAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_withdraw(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static TotemBoxHubV1 load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new TotemBoxHubV1(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TotemBoxHubV1 load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TotemBoxHubV1(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TotemBoxHubV1 load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new TotemBoxHubV1(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TotemBoxHubV1 load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TotemBoxHubV1(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TotemBoxHubV1> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String totemIdAssignerContract, String name,
            String symbol, String baseURI, BigInteger cost, BigInteger maxSupply,
            BigInteger maxMintAmount, BigInteger allowancePerAccount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(totemIdAssignerContract), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseURI), 
                new org.web3j.abi.datatypes.generated.Uint256(cost), 
                new org.web3j.abi.datatypes.generated.Uint256(maxSupply), 
                new org.web3j.abi.datatypes.generated.Uint256(maxMintAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(allowancePerAccount)));
        return deployRemoteCall(TotemBoxHubV1.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<TotemBoxHubV1> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String totemIdAssignerContract, String name, String symbol, String baseURI,
            BigInteger cost, BigInteger maxSupply, BigInteger maxMintAmount,
            BigInteger allowancePerAccount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(totemIdAssignerContract), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseURI), 
                new org.web3j.abi.datatypes.generated.Uint256(cost), 
                new org.web3j.abi.datatypes.generated.Uint256(maxSupply), 
                new org.web3j.abi.datatypes.generated.Uint256(maxMintAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(allowancePerAccount)));
        return deployRemoteCall(TotemBoxHubV1.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TotemBoxHubV1> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String totemIdAssignerContract, String name,
            String symbol, String baseURI, BigInteger cost, BigInteger maxSupply,
            BigInteger maxMintAmount, BigInteger allowancePerAccount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(totemIdAssignerContract), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseURI), 
                new org.web3j.abi.datatypes.generated.Uint256(cost), 
                new org.web3j.abi.datatypes.generated.Uint256(maxSupply), 
                new org.web3j.abi.datatypes.generated.Uint256(maxMintAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(allowancePerAccount)));
        return deployRemoteCall(TotemBoxHubV1.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TotemBoxHubV1> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String totemIdAssignerContract, String name, String symbol, String baseURI,
            BigInteger cost, BigInteger maxSupply, BigInteger maxMintAmount,
            BigInteger allowancePerAccount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(totemIdAssignerContract), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseURI), 
                new org.web3j.abi.datatypes.generated.Uint256(cost), 
                new org.web3j.abi.datatypes.generated.Uint256(maxSupply), 
                new org.web3j.abi.datatypes.generated.Uint256(maxMintAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(allowancePerAccount)));
        return deployRemoteCall(TotemBoxHubV1.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class SpentERC20EventResponse extends BaseEventResponse {
        public String erc20;

        public BigInteger unitPrice;

        public BigInteger totalCost;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class WithdrawnEventResponse extends BaseEventResponse {
        public BigInteger _amount;
    }
}
