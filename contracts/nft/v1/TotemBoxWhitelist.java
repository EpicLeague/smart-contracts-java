package contracts.nft.v1;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class TotemBoxWhitelist extends Contract {
    public static final String BINARY = "0x60c06040526005608081905264173539b7b760d91b60a090815262000028916011919062000387565b503480156200003657600080fd5b506040516200399438038062003994833981016040819052620000599162000517565b82828a8a8a8a8a8a85858581600090805190602001906200007c92919062000387565b5080516200009290600190602084019062000387565b5050600b805460ff1916905550620000aa336200015a565b600c80546001600160a01b0319166001600160a01b0392909216919091179055620000d7600033620001b4565b620001037f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0833620001b4565b6200010e8362000259565b620001198262000299565b6200012481620002c9565b5050505050506200013b82620002f960201b60201c565b62000146816200031b565b505060155550620006329650505050505050565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1662000255576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b33600090815260008051602062003974833981519152602052604090205460ff166200028457600080fd5b80516200025590601090602084019062000387565b33600090815260008051602062003974833981519152602052604090205460ff16620002c457600080fd5b600e55565b33600090815260008051602062003974833981519152602052604090205460ff16620002f457600080fd5b600f55565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b60008111620003825760405162461bcd60e51b815260206004820152602960248201527f4d696e74696e672070726963652073686f756c642062652067726561746572206044820152687468616e207a65726f60b81b606482015260840160405180910390fd5b601355565b8280546200039590620005f6565b90600052602060002090601f016020900481019282620003b9576000855562000404565b82601f10620003d457805160ff191683800117855562000404565b8280016001018555821562000404579182015b8281111562000404578251825591602001919060010190620003e7565b506200041292915062000416565b5090565b5b8082111562000412576000815560010162000417565b80516001600160a01b03811681146200044557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200047257600080fd5b81516001600160401b03808211156200048f576200048f6200044a565b604051601f8301601f19908116603f01168101908282118183101715620004ba57620004ba6200044a565b81604052838152602092508683858801011115620004d757600080fd5b600091505b83821015620004fb5785820183015181830184015290820190620004dc565b838211156200050d5760008385830101525b9695505050505050565b60008060008060008060008060006101208a8c0312156200053757600080fd5b620005428a6200042d565b60208b01519099506001600160401b03808211156200056057600080fd5b6200056e8d838e0162000460565b995060408c01519150808211156200058557600080fd5b620005938d838e0162000460565b985060608c0151915080821115620005aa57600080fd5b50620005b98c828d0162000460565b96505060808a0151945060a08a01519350620005d860c08b016200042d565b925060e08a015191506101008a015190509295985092959850929598565b600181811c908216806200060b57607f821691505b6020821081036200062c57634e487b7160e01b600052602260045260246000fd5b50919050565b61333280620006426000396000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c8063715018a6116101b8578063addc6a7711610104578063da3ef23f116100a2578063e985e9c51161007c578063e985e9c5146106d3578063ec87621c1461070f578063f2fde38b14610724578063f3ae24151461073757600080fd5b8063da3ef23f1461069a578063de562487146106ad578063e43252d7146106c057600080fd5b8063c6682862116100de578063c668286214610663578063c87b56dd1461066b578063d547741f1461067e578063d5abeb011461069157600080fd5b8063addc6a7714610634578063b88d4fde1461063d578063c4b95b5c1461065057600080fd5b806395d89b4111610171578063a217fddf1161014b578063a217fddf146105fd578063a22cb46514610605578063a2309ff814610618578063a30f58231461062157600080fd5b806395d89b41146105cf5780639641ebed146105d7578063a0712d68146105ea57600080fd5b8063715018a61461057b57806382e0c8d9146105835780638456cb591461058b5780638ab1d681146105935780638da5cb5b146105a657806391d14854146105bc57600080fd5b8063377e32e6116102925780634f6ccce7116102305780636352211e1161020a5780636352211e1461053a5780636c0360eb1461054d5780636f8b44b01461055557806370a082311461056857600080fd5b80634f6ccce71461050957806355f804b31461051c5780635c975abb1461052f57600080fd5b806342842e0e1161026c57806342842e0e146104b057806342966c68146104c3578063435387d1146104d6578063438b6300146104e957600080fd5b8063377e32e6146104695780633af32abf1461047c5780633f4ba83a146104a857600080fd5b8063208b5059116102ff578063248a9ca3116102d9578063248a9ca31461040d5780632f2ff15d146104305780632f745c591461044357806336568abe1461045657600080fd5b8063208b5059146103e9578063239c70ae146103f157806323b872dd146103fa57600080fd5b806301ffc9a71461034757806306fdde031461036f578063081812fc14610384578063088a4ed0146103af578063095ea7b3146103c457806318160ddd146103d7575b600080fd5b61035a610355366004612a8b565b61074a565b60405190151581526020015b60405180910390f35b61037761075b565b6040516103669190612b00565b610397610392366004612b13565b6107ed565b6040516001600160a01b039091168152602001610366565b6103c26103bd366004612b13565b610887565b005b6103c26103d2366004612b48565b6108ad565b6008545b604051908152602001610366565b6103c26109c2565b6103db600f5481565b6103c2610408366004612b72565b610b80565b6103db61041b366004612b13565b6000908152600a602052604090206001015490565b6103c261043e366004612bae565b610bb2565b6103db610451366004612b48565b610bd7565b6103c2610464366004612bae565b610c6d565b6103c2610477366004612bda565b610ceb565b61035a61048a366004612bda565b6001600160a01b031660009081526014602052604090205460ff1690565b6103c2610d27565b6103c26104be366004612b72565b610d52565b6103c26104d1366004612b13565b610d6d565b6103c26104e4366004612b13565b610de4565b6104fc6104f7366004612bda565b610e05565b6040516103669190612bf5565b6103db610517366004612b13565b610ea7565b6103c261052a366004612cc5565b610f3a565b600b5460ff1661035a565b610397610548366004612b13565b610f6e565b610377610fe5565b6103c2610563366004612b13565b611073565b6103db610576366004612bda565b611099565b6103c2611120565b6013546103db565b6103c261115a565b6103c26105a1366004612bda565b611183565b600b5461010090046001600160a01b0316610397565b61035a6105ca366004612bae565b6111a4565b6103776111cf565b6103c26105e5366004612b13565b6111de565b6103c26105f8366004612b13565b6111fc565b6103db600081565b6103c2610613366004612d1c565b61144a565b6103db600d5481565b6103c261062f366004612d53565b611455565b6103db60155481565b6103c261064b366004612dc8565b6114bf565b6103c261065e366004612bda565b6114f1565b61037761152a565b610377610679366004612b13565b611537565b6103c261068c366004612bae565b611615565b6103db600e5481565b6103c26106a8366004612cc5565b61163a565b6103c26106bb366004612bda565b61166e565b6103c26106ce366004612bda565b6116a5565b61035a6106e1366004612e44565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103db6000805160206132dd83398151915281565b6103c2610732366004612bda565b6116c6565b61035a610745366004612bda565b611764565b60006107558261177e565b92915050565b60606000805461076a90612e6e565b80601f016020809104026020016040519081016040528092919081815260200182805461079690612e6e565b80156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661086b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b61089f6000805160206132dd833981519152336111a4565b6108a857600080fd5b600f55565b60006108b882610f6e565b9050806001600160a01b0316836001600160a01b0316036109255760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610862565b336001600160a01b0382161480610941575061094181336106e1565b6109b35760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610862565b6109bd83836117a3565b505050565b600b546001600160a01b036101009091041633146109f25760405162461bcd60e51b815260040161086290612ea8565b6012546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a639190612edd565b9050816001600160a01b031663a9059cbb610a8c600b546001600160a01b036101009091041690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd9190612ef6565b610b495760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f20776974686472617720455243323020746f6b656e2e006044820152606401610862565b6040518181527f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b569060200160405180910390a15050565b610b8b335b82611811565b610ba75760405162461bcd60e51b815260040161086290612f13565b6109bd838383611908565b6000828152600a6020526040902060010154610bcd81611aaf565b6109bd8383611ab9565b6000610be283611099565b8210610c445760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610862565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610cdd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610862565b610ce78282611b3f565b5050565b610d036000805160206132dd833981519152336111a4565b610d0c57600080fd5b610d246000805160206132dd83398151915282611b3f565b50565b610d3f6000805160206132dd833981519152336111a4565b610d4857600080fd5b610d50611ba6565b565b6109bd838383604051806020016040528060008152506114bf565b610d7633610b85565b610ddb5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610862565b610d2481611c39565b6000805160206132dd833981519152610dfc81611aaf565b610ce782611ce0565b60606000610e1283611099565b905060008167ffffffffffffffff811115610e2f57610e2f612c39565b604051908082528060200260200182016040528015610e58578160200160208202803683370190505b50905060005b82811015610e9f57610e708582610bd7565b828281518110610e8257610e82612f64565b602090810291909101015280610e9781612f90565b915050610e5e565b509392505050565b6000610eb260085490565b8210610f155760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610862565b60088281548110610f2857610f28612f64565b90600052602060002001549050919050565b610f526000805160206132dd833981519152336111a4565b610f5b57600080fd5b8051610ce79060109060208401906129dc565b6000818152600260205260408120546001600160a01b0316806107555760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610862565b60108054610ff290612e6e565b80601f016020809104026020016040519081016040528092919081815260200182805461101e90612e6e565b801561106b5780601f106110405761010080835404028352916020019161106b565b820191906000526020600020905b81548152906001019060200180831161104e57829003601f168201915b505050505081565b61108b6000805160206132dd833981519152336111a4565b61109457600080fd5b600e55565b60006001600160a01b0382166111045760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610862565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b036101009091041633146111505760405162461bcd60e51b815260040161086290612ea8565b610d506000611d47565b6111726000805160206132dd833981519152336111a4565b61117b57600080fd5b610d50611da1565b6000805160206132dd83398151915261119b81611aaf565b610ce782611df9565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461076a90612e6e565b6000805160206132dd8339815191526111f681611aaf565b50601555565b3360009081526014602052604090205460ff1661125b5760405162461bcd60e51b815260206004820152601b60248201527f596f75206e65656420746f2062652077686974656c69737465642e00000000006044820152606401610862565b600b5460ff161561127e5760405162461bcd60e51b815260040161086290612fa9565b806015548161128d6105763390565b6112979190612fd3565b11156112a4601554611e42565b6040516020016112b49190612feb565b604051602081830303815290604052906112e15760405162461bcd60e51b81526004016108629190612b00565b5081600081116113445760405162461bcd60e51b815260206004820152602860248201527f4d696e7420616d6f756e742073686f756c64206265206772656174657220746860448201526730b7103d32b9379760c11b6064820152608401610862565b82600f548111156113b25760405162461bcd60e51b815260206004820152603260248201527f4d696e7420616d6f756e742073686f756c6420626520736d616c6c6572207468604482015271185b881b585e081b5a5b9d08185b5bdd5b9d60721b6064820152608401610862565b600e5484600d546113c39190612fd3565b11156114075760405162461bcd60e51b815260206004820152601360248201527226b0bc1039bab838363c9032bc31b2b2b2399760691b6044820152606401610862565b61141084611f43565b60015b84811161144357600061142461204e565b905061143033826120c2565b508061143b81612f90565b915050611413565b5050505050565b610ce73383836120dc565b6000805160206132dd83398151915261146d81611aaf565b60005b828110156114b9576114a784848381811061148d5761148d612f64565b90506020020160208101906114a29190612bda565b6121aa565b806114b181612f90565b915050611470565b50505050565b6114c93383611811565b6114e55760405162461bcd60e51b815260040161086290612f13565b6114b9848484846121f6565b6115096000805160206132dd833981519152336111a4565b61151257600080fd5b610d246000805160206132dd83398151915282611ab9565b60118054610ff290612e6e565b6000818152600260205260409020546060906001600160a01b03166115b65760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610862565b60006115c0612229565b905060008151116115e0576040518060200160405280600081525061160e565b806115ea84611e42565b60116040516020016115fe93929190613057565b6040516020818303038152906040525b9392505050565b6000828152600a602052604090206001015461163081611aaf565b6109bd8383611b3f565b6116526000805160206132dd833981519152336111a4565b61165b57600080fd5b8051610ce79060119060208401906129dc565b6000805160206132dd83398151915261168681611aaf565b601280546001600160a01b0319166001600160a01b0384161790555050565b6000805160206132dd8339815191526116bd81611aaf565b610ce7826121aa565b600b546001600160a01b036101009091041633146116f65760405162461bcd60e51b815260040161086290612ea8565b6001600160a01b03811661175b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610862565b610d2481611d47565b60006107556000805160206132dd833981519152836111a4565b60006001600160e01b03198216637965db0b60e01b1480610755575061075582612238565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906117d882610f6e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b031661188a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610862565b600061189583610f6e565b9050806001600160a01b0316846001600160a01b031614806118dc57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806119005750836001600160a01b03166118f5846107ed565b6001600160a01b0316145b949350505050565b826001600160a01b031661191b82610f6e565b6001600160a01b03161461197f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610862565b6001600160a01b0382166119e15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610862565b6119ec83838361225d565b6119f76000826117a3565b6001600160a01b0383166000908152600360205260408120805460019290611a2090849061311a565b90915550506001600160a01b0382166000908152600360205260408120805460019290611a4e908490612fd3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610d2481336122c2565b611ac382826111a4565b610ce7576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611afb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b4982826111a4565b15610ce7576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600b5460ff16611bef5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610862565b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000611c4482610f6e565b9050611c528160008461225d565b611c5d6000836117a3565b6001600160a01b0381166000908152600360205260408120805460019290611c8690849061311a565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008111611d425760405162461bcd60e51b815260206004820152602960248201527f4d696e74696e672070726963652073686f756c642062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610862565b601355565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600b5460ff1615611dc45760405162461bcd60e51b815260040161086290612fa9565b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c1c3390565b6001600160a01b038116600081815260146020526040808220805460ff19169055517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579190a250565b606081600003611e695750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e935780611e7d81612f90565b9150611e8c9050600a83613147565b9150611e6d565b60008167ffffffffffffffff811115611eae57611eae612c39565b6040519080825280601f01601f191660200182016040528015611ed8576020820181803683370190505b5090505b841561190057611eed60018361311a565b9150611efa600a8661315b565b611f05906030612fd3565b60f81b818381518110611f1a57611f1a612f64565b60200101906001600160f81b031916908160001a905350611f3c600a86613147565b9450611edc565b6000611f4e60135490565b6012549091506001600160a01b03166000611f69848461316f565b90506001600160a01b0382166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018490526064016020604051808303816000875af1158015611fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff29190612ef6565b611ffb57600080fd5b601254604080516001600160a01b0390921682526020820185905281018290527fee821f13009961f2de7180495d66e5b3e155b001f06db1aff96a720045ea404b9060600160405180910390a150505050565b600c5460408051631c28c8e960e31b815290516000926001600160a01b03169163e1464748916004808301926020929190829003018187875af1158015612099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bd9190612edd565b905090565b610ce7828260405180602001604052806000815250612326565b816001600160a01b0316836001600160a01b03160361213d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610862565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038116600081815260146020526040808220805460ff19166001179055517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039190a250565b612201848484611908565b61220d84848484612359565b6114b95760405162461bcd60e51b81526004016108629061318e565b60606010805461076a90612e6e565b60006001600160e01b0319821663780e9d6360e01b148061075557506107558261245a565b6001600160a01b0382161561228f57600b5460ff161561228f5760405162461bcd60e51b815260040161086290612fa9565b61229a8383836124aa565b6001600160a01b0383166109bd57600d80549060006122b883612f90565b9190505550505050565b6122cc82826111a4565b610ce7576122e4816001600160a01b03166014612562565b6122ef836020612562565b6040516020016123009291906131e0565b60408051601f198184030181529082905262461bcd60e51b825261086291600401612b00565b61233083836126fe565b61233d6000848484612359565b6109bd5760405162461bcd60e51b81526004016108629061318e565b60006001600160a01b0384163b1561244f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061239d903390899088908890600401613255565b6020604051808303816000875af19250505080156123d8575060408051601f3d908101601f191682019092526123d591810190613292565b60015b612435573d808015612406576040519150601f19603f3d011682016040523d82523d6000602084013e61240b565b606091505b50805160000361242d5760405162461bcd60e51b81526004016108629061318e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611900565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b148061248b57506001600160e01b03198216635b5e139f60e01b145b8061075557506301ffc9a760e01b6001600160e01b0319831614610755565b6001600160a01b0383166125055761250081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612528565b816001600160a01b0316836001600160a01b03161461252857612528838261284c565b6001600160a01b03821661253f576109bd816128e9565b826001600160a01b0316826001600160a01b0316146109bd576109bd8282612998565b6060600061257183600261316f565b61257c906002612fd3565b67ffffffffffffffff81111561259457612594612c39565b6040519080825280601f01601f1916602001820160405280156125be576020820181803683370190505b509050600360fc1b816000815181106125d9576125d9612f64565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061260857612608612f64565b60200101906001600160f81b031916908160001a905350600061262c84600261316f565b612637906001612fd3565b90505b60018111156126af576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061266b5761266b612f64565b1a60f81b82828151811061268157612681612f64565b60200101906001600160f81b031916908160001a90535060049490941c936126a8816132af565b905061263a565b50831561160e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610862565b6001600160a01b0382166127545760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610862565b6000818152600260205260409020546001600160a01b0316156127b95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610862565b6127c56000838361225d565b6001600160a01b03821660009081526003602052604081208054600192906127ee908490612fd3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000600161285984611099565b612863919061311a565b6000838152600760205260409020549091508082146128b6576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906128fb9060019061311a565b6000838152600960205260408120546008805493945090928490811061292357612923612f64565b90600052602060002001549050806008838154811061294457612944612f64565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061297c5761297c6132c6565b6001900381819060005260206000200160009055905550505050565b60006129a383611099565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b8280546129e890612e6e565b90600052602060002090601f016020900481019282612a0a5760008555612a50565b82601f10612a2357805160ff1916838001178555612a50565b82800160010185558215612a50579182015b82811115612a50578251825591602001919060010190612a35565b50612a5c929150612a60565b5090565b5b80821115612a5c5760008155600101612a61565b6001600160e01b031981168114610d2457600080fd5b600060208284031215612a9d57600080fd5b813561160e81612a75565b60005b83811015612ac3578181015183820152602001612aab565b838111156114b95750506000910152565b60008151808452612aec816020860160208601612aa8565b601f01601f19169290920160200192915050565b60208152600061160e6020830184612ad4565b600060208284031215612b2557600080fd5b5035919050565b80356001600160a01b0381168114612b4357600080fd5b919050565b60008060408385031215612b5b57600080fd5b612b6483612b2c565b946020939093013593505050565b600080600060608486031215612b8757600080fd5b612b9084612b2c565b9250612b9e60208501612b2c565b9150604084013590509250925092565b60008060408385031215612bc157600080fd5b82359150612bd160208401612b2c565b90509250929050565b600060208284031215612bec57600080fd5b61160e82612b2c565b6020808252825182820181905260009190848201906040850190845b81811015612c2d57835183529284019291840191600101612c11565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612c6a57612c6a612c39565b604051601f8501601f19908116603f01168101908282118183101715612c9257612c92612c39565b81604052809350858152868686011115612cab57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612cd757600080fd5b813567ffffffffffffffff811115612cee57600080fd5b8201601f81018413612cff57600080fd5b61190084823560208401612c4f565b8015158114610d2457600080fd5b60008060408385031215612d2f57600080fd5b612d3883612b2c565b91506020830135612d4881612d0e565b809150509250929050565b60008060208385031215612d6657600080fd5b823567ffffffffffffffff80821115612d7e57600080fd5b818501915085601f830112612d9257600080fd5b813581811115612da157600080fd5b8660208260051b8501011115612db657600080fd5b60209290920196919550909350505050565b60008060008060808587031215612dde57600080fd5b612de785612b2c565b9350612df560208601612b2c565b925060408501359150606085013567ffffffffffffffff811115612e1857600080fd5b8501601f81018713612e2957600080fd5b612e3887823560208401612c4f565b91505092959194509250565b60008060408385031215612e5757600080fd5b612e6083612b2c565b9150612bd160208401612b2c565b600181811c90821680612e8257607f821691505b602082108103612ea257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612eef57600080fd5b5051919050565b600060208284031215612f0857600080fd5b815161160e81612d0e565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612fa257612fa2612f7a565b5060010190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60008219821115612fe657612fe6612f7a565b500190565b7f546f74656d426f78466c61736853616c653a206f6e6c79200000000000000000815260008251613023816018850160208701612aa8565b7f20626f7865732061726520616c6c6f77656420706572206163636f756e742e006018939091019283015250603701919050565b60008451602061306a8285838a01612aa8565b85519184019161307d8184848a01612aa8565b8554920191600090600181811c908083168061309a57607f831692505b85831081036130b757634e487b7160e01b85526022600452602485fd5b8080156130cb57600181146130dc57613109565b60ff19851688528388019550613109565b60008b81526020902060005b858110156131015781548a8201529084019088016130e8565b505083880195505b50939b9a5050505050505050505050565b60008282101561312c5761312c612f7a565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261315657613156613131565b500490565b60008261316a5761316a613131565b500690565b600081600019048311821515161561318957613189612f7a565b500290565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613218816017850160208801612aa8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613249816028840160208801612aa8565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061328890830184612ad4565b9695505050505050565b6000602082840312156132a457600080fd5b815161160e81612a75565b6000816132be576132be612f7a565b506000190190565b634e487b7160e01b600052603160045260246000fdfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a2646970667358221220982afb51603bccc6c03d6dad055dded993b3f9cf03ab07ba0794bcd225f0ff9664736f6c634300080e0033d455b02263d38bf66a1ba205b80d4fdc1196fd75b5131f681af52f64427d695b";

    private static String librariesLinkedBinary;

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MANAGER_ROLE = "MANAGER_ROLE";

    public static final String FUNC_AMOUNTALLOWANCEPERACCOUNT = "amountAllowancePerAccount";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASEEXTENSION = "baseExtension";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTMANAGER = "grantManager";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISMANAGER = "isManager";

    public static final String FUNC_ISWHITELISTED = "isWhitelisted";

    public static final String FUNC_MAXMINTAMOUNT = "maxMintAmount";

    public static final String FUNC_MAXSUPPLY = "maxSupply";

    public static final String FUNC_MINTINGPRICEOFERC20TOKEN = "mintingPriceOfERC20Token";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEMANAGER = "revokeManager";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASEEXTENSION = "setBaseExtension";

    public static final String FUNC_SETBASEURI = "setBaseURI";

    public static final String FUNC_SETMAXMINTAMOUNT = "setMaxMintAmount";

    public static final String FUNC_SETMAXSUPPLY = "setMaxSupply";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALMINTED = "totalMinted";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_WALLETOFOWNER = "walletOfOwner";

    public static final String FUNC_WITHDRAWERC20TOKEN = "withdrawERC20Token";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_SETAMOUNTALLOWANCEPERACCOUNT = "setAmountAllowancePerAccount";

    public static final String FUNC_SETERC20TOKEN = "setERC20Token";

    public static final String FUNC_SETERC20MINTINGPRICE = "setERC20MintingPrice";

    public static final String FUNC_BULKADDTOWHITELIST = "bulkAddToWhiteList";

    public static final String FUNC_ADDTOWHITELIST = "addToWhitelist";

    public static final String FUNC_REMOVEFROMWHITELIST = "removeFromWhitelist";

    public static final Event ADDEDTOWHITELIST_EVENT = new Event("AddedToWhitelist", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REMOVEDFROMWHITELIST_EVENT = new Event("RemovedFromWhitelist", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SPENTERC20_EVENT = new Event("SpentERC20", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event WITHDRAWN_EVENT = new Event("Withdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1677429376372", "0x892be6fd47009ea54981D08E06bDd02b2E3DA0e6");
        _addresses.put("80001", "0x3b1916BFB21901Fc3bCED8DB2b1B5F675Db830e6");
        _addresses.put("137", "0x7162C8A6f9a43ff152Cd326F03A83BF0992D8414");
        _addresses.put("40875", "0xb83903392B50aaa5094dc29a5ca443f976452639");
    }

    @Deprecated
    protected TotemBoxWhitelist(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TotemBoxWhitelist(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TotemBoxWhitelist(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TotemBoxWhitelist(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AddedToWhitelistEventResponse> getAddedToWhitelistEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ADDEDTOWHITELIST_EVENT, transactionReceipt);
        ArrayList<AddedToWhitelistEventResponse> responses = new ArrayList<AddedToWhitelistEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddedToWhitelistEventResponse typedResponse = new AddedToWhitelistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AddedToWhitelistEventResponse getAddedToWhitelistEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADDEDTOWHITELIST_EVENT, log);
        AddedToWhitelistEventResponse typedResponse = new AddedToWhitelistEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AddedToWhitelistEventResponse> addedToWhitelistEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAddedToWhitelistEventFromLog(log));
    }

    public Flowable<AddedToWhitelistEventResponse> addedToWhitelistEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDEDTOWHITELIST_EVENT));
        return addedToWhitelistEventFlowable(filter);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RemovedFromWhitelistEventResponse> getRemovedFromWhitelistEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REMOVEDFROMWHITELIST_EVENT, transactionReceipt);
        ArrayList<RemovedFromWhitelistEventResponse> responses = new ArrayList<RemovedFromWhitelistEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemovedFromWhitelistEventResponse typedResponse = new RemovedFromWhitelistEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RemovedFromWhitelistEventResponse getRemovedFromWhitelistEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REMOVEDFROMWHITELIST_EVENT, log);
        RemovedFromWhitelistEventResponse typedResponse = new RemovedFromWhitelistEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RemovedFromWhitelistEventResponse> removedFromWhitelistEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRemovedFromWhitelistEventFromLog(log));
    }

    public Flowable<RemovedFromWhitelistEventResponse> removedFromWhitelistEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REMOVEDFROMWHITELIST_EVENT));
        return removedFromWhitelistEventFlowable(filter);
    }

    public static List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleAdminChangedEventResponse getRoleAdminChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
        RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleAdminChangedEventFromLog(log));
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public static List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleGrantedEventResponse getRoleGrantedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, log);
        RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleGrantedEventFromLog(log));
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public static List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleRevokedEventResponse getRoleRevokedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, log);
        RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleRevokedEventFromLog(log));
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public static List<SpentERC20EventResponse> getSpentERC20Events(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SPENTERC20_EVENT, transactionReceipt);
        ArrayList<SpentERC20EventResponse> responses = new ArrayList<SpentERC20EventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SpentERC20EventResponse typedResponse = new SpentERC20EventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.erc20 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.unitPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.totalCost = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SpentERC20EventResponse getSpentERC20EventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SPENTERC20_EVENT, log);
        SpentERC20EventResponse typedResponse = new SpentERC20EventResponse();
        typedResponse.log = log;
        typedResponse.erc20 = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.unitPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.totalCost = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<SpentERC20EventResponse> spentERC20EventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSpentERC20EventFromLog(log));
    }

    public Flowable<SpentERC20EventResponse> spentERC20EventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SPENTERC20_EVENT));
        return spentERC20EventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public static List<WithdrawnEventResponse> getWithdrawnEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWN_EVENT, transactionReceipt);
        ArrayList<WithdrawnEventResponse> responses = new ArrayList<WithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawnEventResponse typedResponse = new WithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawnEventResponse getWithdrawnEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWN_EVENT, log);
        WithdrawnEventResponse typedResponse = new WithdrawnEventResponse();
        typedResponse.log = log;
        typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawnEventResponse> withdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawnEventFromLog(log));
    }

    public Flowable<WithdrawnEventResponse> withdrawnEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWN_EVENT));
        return withdrawnEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> call_DEFAULT_ADMIN_ROLE() {
        final Function function = new Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_DEFAULT_ADMIN_ROLE() {
        final Function function = new Function(
                FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> call_MANAGER_ROLE() {
        final Function function = new Function(FUNC_MANAGER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_MANAGER_ROLE() {
        final Function function = new Function(
                FUNC_MANAGER_ROLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_amountAllowancePerAccount() {
        final Function function = new Function(FUNC_AMOUNTALLOWANCEPERACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_amountAllowancePerAccount() {
        final Function function = new Function(
                FUNC_AMOUNTALLOWANCEPERACCOUNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_balanceOf(String owner) {
        final Function function = new Function(
                FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_baseExtension() {
        final Function function = new Function(FUNC_BASEEXTENSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_baseExtension() {
        final Function function = new Function(
                FUNC_BASEEXTENSION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_baseURI() {
        final Function function = new Function(FUNC_BASEURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_baseURI() {
        final Function function = new Function(
                FUNC_BASEURI, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_burn(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_getApproved(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> call_getRoleAdmin(byte[] role) {
        final Function function = new Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_getRoleAdmin(byte[] role) {
        final Function function = new Function(
                FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_grantManager(String account) {
        final Function function = new Function(
                FUNC_GRANTMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_grantRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_hasRole(byte[] role, String account) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_hasRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_isApprovedForAll(String owner,
            String operator) {
        final Function function = new Function(
                FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_isManager(String account) {
        final Function function = new Function(FUNC_ISMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_isManager(String account) {
        final Function function = new Function(
                FUNC_ISMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_isWhitelisted(String account) {
        final Function function = new Function(FUNC_ISWHITELISTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_isWhitelisted(String account) {
        final Function function = new Function(
                FUNC_ISWHITELISTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_maxMintAmount() {
        final Function function = new Function(FUNC_MAXMINTAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_maxMintAmount() {
        final Function function = new Function(
                FUNC_MAXMINTAMOUNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_maxSupply() {
        final Function function = new Function(FUNC_MAXSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_maxSupply() {
        final Function function = new Function(
                FUNC_MAXSUPPLY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_mintingPriceOfERC20Token() {
        final Function function = new Function(FUNC_MINTINGPRICEOFERC20TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_mintingPriceOfERC20Token() {
        final Function function = new Function(
                FUNC_MINTINGPRICEOFERC20TOKEN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_name() {
        final Function function = new Function(
                FUNC_NAME, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_owner() {
        final Function function = new Function(
                FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_ownerOf(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_paused() {
        final Function function = new Function(
                FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_renounceRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_revokeManager(String account) {
        final Function function = new Function(
                FUNC_REVOKEMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_revokeRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] _data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setBaseExtension(String _newBaseExtension) {
        final Function function = new Function(
                FUNC_SETBASEEXTENSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_newBaseExtension)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setBaseURI(String _newBaseURI) {
        final Function function = new Function(
                FUNC_SETBASEURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_newBaseURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setMaxMintAmount(
            BigInteger _newmaxMintAmount) {
        final Function function = new Function(
                FUNC_SETMAXMINTAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newmaxMintAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setMaxSupply(BigInteger _newMaxSupply) {
        final Function function = new Function(
                FUNC_SETMAXSUPPLY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newMaxSupply)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> call_supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_supportsInterface(byte[] interfaceId) {
        final Function function = new Function(
                FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_symbol() {
        final Function function = new Function(
                FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_tokenByIndex(BigInteger index) {
        final Function function = new Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_tokenByIndex(BigInteger index) {
        final Function function = new Function(
                FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_tokenOfOwnerByIndex(String owner, BigInteger index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_tokenOfOwnerByIndex(String owner,
            BigInteger index) {
        final Function function = new Function(
                FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> call_tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_tokenURI(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_totalMinted() {
        final Function function = new Function(FUNC_TOTALMINTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_totalMinted() {
        final Function function = new Function(
                FUNC_TOTALMINTED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> call_totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> send_totalSupply() {
        final Function function = new Function(
                FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> call_walletOfOwner(String _owner) {
        final Function function = new Function(FUNC_WALLETOFOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> send_walletOfOwner(String _owner) {
        final Function function = new Function(
                FUNC_WALLETOFOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_withdrawERC20Token() {
        final Function function = new Function(
                FUNC_WITHDRAWERC20TOKEN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_mint(BigInteger mintAmount) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mintAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setAmountAllowancePerAccount(
            BigInteger allowance) {
        final Function function = new Function(
                FUNC_SETAMOUNTALLOWANCEPERACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(allowance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setERC20Token(String erc20) {
        final Function function = new Function(
                FUNC_SETERC20TOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(erc20)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_setERC20MintingPrice(BigInteger price) {
        final Function function = new Function(
                FUNC_SETERC20MINTINGPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_bulkAddToWhiteList(List<String> account) {
        final Function function = new Function(
                FUNC_BULKADDTOWHITELIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(account, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_addToWhitelist(String account) {
        final Function function = new Function(
                FUNC_ADDTOWHITELIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> send_removeFromWhitelist(String account) {
        final Function function = new Function(
                FUNC_REMOVEFROMWHITELIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TotemBoxWhitelist load(String contractAddress, Web3j web3j,
            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TotemBoxWhitelist(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TotemBoxWhitelist load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TotemBoxWhitelist(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TotemBoxWhitelist load(String contractAddress, Web3j web3j,
            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TotemBoxWhitelist(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TotemBoxWhitelist load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TotemBoxWhitelist(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TotemBoxWhitelist> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String totemIdAssignerContract, String name,
            String symbol, String baseURI, BigInteger maxSupply, BigInteger maxMintAmount,
            String mintableERC20TokenAddress, BigInteger mintableERC20MintingPrice,
            BigInteger allowancePerAccount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(totemIdAssignerContract), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseURI), 
                new org.web3j.abi.datatypes.generated.Uint256(maxSupply), 
                new org.web3j.abi.datatypes.generated.Uint256(maxMintAmount), 
                new org.web3j.abi.datatypes.Address(mintableERC20TokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(mintableERC20MintingPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(allowancePerAccount)));
        return deployRemoteCall(TotemBoxWhitelist.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<TotemBoxWhitelist> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String totemIdAssignerContract, String name, String symbol, String baseURI,
            BigInteger maxSupply, BigInteger maxMintAmount, String mintableERC20TokenAddress,
            BigInteger mintableERC20MintingPrice, BigInteger allowancePerAccount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(totemIdAssignerContract), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseURI), 
                new org.web3j.abi.datatypes.generated.Uint256(maxSupply), 
                new org.web3j.abi.datatypes.generated.Uint256(maxMintAmount), 
                new org.web3j.abi.datatypes.Address(mintableERC20TokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(mintableERC20MintingPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(allowancePerAccount)));
        return deployRemoteCall(TotemBoxWhitelist.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TotemBoxWhitelist> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String totemIdAssignerContract, String name,
            String symbol, String baseURI, BigInteger maxSupply, BigInteger maxMintAmount,
            String mintableERC20TokenAddress, BigInteger mintableERC20MintingPrice,
            BigInteger allowancePerAccount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(totemIdAssignerContract), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseURI), 
                new org.web3j.abi.datatypes.generated.Uint256(maxSupply), 
                new org.web3j.abi.datatypes.generated.Uint256(maxMintAmount), 
                new org.web3j.abi.datatypes.Address(mintableERC20TokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(mintableERC20MintingPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(allowancePerAccount)));
        return deployRemoteCall(TotemBoxWhitelist.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TotemBoxWhitelist> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String totemIdAssignerContract, String name, String symbol, String baseURI,
            BigInteger maxSupply, BigInteger maxMintAmount, String mintableERC20TokenAddress,
            BigInteger mintableERC20MintingPrice, BigInteger allowancePerAccount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(totemIdAssignerContract), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseURI), 
                new org.web3j.abi.datatypes.generated.Uint256(maxSupply), 
                new org.web3j.abi.datatypes.generated.Uint256(maxMintAmount), 
                new org.web3j.abi.datatypes.Address(mintableERC20TokenAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(mintableERC20MintingPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(allowancePerAccount)));
        return deployRemoteCall(TotemBoxWhitelist.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AddedToWhitelistEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RemovedFromWhitelistEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class SpentERC20EventResponse extends BaseEventResponse {
        public String erc20;

        public BigInteger unitPrice;

        public BigInteger totalCost;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class WithdrawnEventResponse extends BaseEventResponse {
        public BigInteger _amount;
    }
}
